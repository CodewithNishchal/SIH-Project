<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Reports & Statistics</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Mapbox GL CSS -->
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet">
    <style>
        /* Custom styles */
        body {
            font-family: 'Inter', sans-serif;
        }

        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        /* Style for the main content area to prevent overlap with fixed sidebar */
        @media (min-width: 1024px) {
            .main-content {
                margin-left: 16rem;
                /* Same as sidebar width */
            }
        }

        /* Sidebar transition */
        .sidebar {
            transition: transform 0.3s ease-in-out;
        }
    </style>
</head>

<body class="bg-blue-100 text-gray-800">
    
    <div class="flex min-h-screen">
        <!-- ========== LEFT-HAND NAVIGATION SIDEBAR ========== -->
        <%- include('../../partials/sidebar.ejs') %>
        
        <!-- Overlay for mobile -->
        <div id="sidebar-overlay" class="fixed inset-0 bg-black opacity-50 z-30 hidden lg:hidden"></div>
        
        <!-- Main content -->
        <div class="flex-1 flex flex-col main-content">
            <!-- ========== TOP NAVIGATION BAR ========== -->
            <%- include('../../partials/navbar.ejs') %>
            
            <!-- ========== DASHBOARD CONTENT ========== -->
            <main class="flex-1 p-6">
                <div class="flex justify-between items-center mb-3">
                    <h2 class="text-3xl font-bold">Dashboard</h2>
                    <p class="text-gray-500" id="current-date"></p>
                </div>

                <!-- Key Performance Indicators (KPIs) -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                
                    <div class="bg-white p-6 rounded-lg shadow-sm">
                        <div class="flex justify-between items-start">
                            <div>
                                <p class="text-sm text-gray-500 uppercase">Reports Generated</p>
                                <p class="text-3xl font-bold">
                                    <%= kpiData.reports.total %>
                                </p>
                            </div>
                            <div class="p-2 bg-green-100 rounded-md">
                                <svg class="w-6 h-6 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M7.5 14.25v2.25m3-4.5v4.5m3-6.75v6.75m3-9v9M6 20.25h12A2.25 2.25 0 0020.25 18V6A2.25 2.25 0 0018 3.75H6A2.25 2.25 0 003.75 6v12A2.25 2.25 0 006 20.25z" />
                                </svg>
                            </div>
                        </div>
                        <p class="text-xs text-<%= kpiData.reports.trendColor %> mt-2">
                            <%= kpiData.reports.trend %>
                        </p>
                    </div>
                
                    <div class="bg-white p-6 rounded-lg shadow-sm">
                        <div class="flex justify-between items-start">
                            <div>
                                <p class="text-sm text-gray-500 uppercase">Active Users</p>
                                <p class="text-3xl font-bold">
                                    <%= kpiData.users.total %>
                                </p>
                            </div>
                            <div class="p-2 bg-blue-100 rounded-md">
                                <svg class="w-6 h-6 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m-7.5-2.962A3 3 0 0115 9.185V18a3 3 0 01-4.682-2.72m-7.5-2.962V7.429a3 3 0 013-3h3.548a3 3 0 012.864 2.164m-6.028 9.805A9.094 9.094 0 013 18.72m15 0a9.094 9.094 0 01-3.741-.479M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                            </div>
                        </div>
                        <p class="text-xs text-gray-500 mt-2">
                            <%= kpiData.users.description %>
                        </p>
                    </div>
                
                    <div class="bg-white p-6 rounded-lg shadow-sm">
                        <div class="flex justify-between items-start">
                            <div>
                                <p class="text-sm text-gray-500 uppercase">Data Sources</p>
                                <p class="text-3xl font-bold">
                                    <%= kpiData.sources.total %>
                                </p>
                            </div>
                            <div class="p-2 bg-yellow-100 rounded-md">
                                <svg class="w-6 h-6 text-yellow-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M20.25 12.75v-2.5a9 9 0 00-9-9h-1.5a9 9 0 00-9 9v2.5m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-8.5 4.907a2.25 2.25 0 01-2.18 0l-8.5-4.907A2.25 2.25 0 013 13.003v-.255m16.5 0a2.25 2.25 0 00-2.25-2.25h-12a2.25 2.25 0 00-2.25 2.25m16.5 0v9.75A2.25 2.25 0 0118 22.5h-12a2.25 2.25 0 01-2.25-2.25v-9.75" />
                                </svg>
                            </div>
                        </div>
                        <p class="text-xs text-<%= kpiData.sources.statusColor %> mt-2">
                            <%= kpiData.sources.status %>
                        </p>
                    </div>
                
                    <div class="bg-white p-6 rounded-lg shadow-sm">
                        <div class="flex justify-between items-start">
                            <div>
                                <p class="text-sm text-gray-500 uppercase">Critical Alerts</p>
                                <p class="text-3xl font-bold">
                                    <%= kpiData.alerts.total %>
                                </p>
                            </div>
                            <div class="p-2 bg-red-100 rounded-md">
                                <svg class="w-6 h-6 text-red-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke-width="1.5" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                        d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                                </svg>
                            </div>
                        </div>
                        <p class="text-xs text-<%= kpiData.alerts.descriptionColor %> mt-2">
                            <%= kpiData.alerts.description %>
                        </p>
                    </div>
                </div>

                <!-- Data Visualization & Recent Activity -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- New Code for the Map Container -->
                    <div class="lg:col-span-2 bg-white p-6 rounded-lg shadow-sm">
                        <h3 class="text-lg font-semibold mb-4">Report Locations</h3>
                        <!-- The map will be rendered inside this div -->
                        <div id="map" class="h-[70vh] w-full rounded-lg border border-gray-300"
                            style="box-shadow: 0px 8px 16px rgba(0,0,0,0.2), 0px -8px 16px rgba(0,0,0,0.1);">
                        </div>
                    </div>

                    <!-- Recent Reports -->
                    <%- include('../../partials/activityLogs.ejs') %>

                    <!-- System Activity Log -->
                    <div class="lg:col-span-3 bg-white p-6 rounded-lg shadow-sm">
                        <h3 class="text-lg font-semibold mb-4">System Activity Log</h3>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm text-left">
                                <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-6 py-3">User</th>
                                        <th scope="col" class="px-6 py-3">Action</th>
                                        <th scope="col" class="px-6 py-3">Status</th>
                                        <th scope="col" class="px-6 py-3">Timestamp</th>
                                        <th scope="col" class="px-6 py-3">Details</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr class="bg-white border-b">
                                        <td class="px-6 py-4 font-medium text-gray-900">jane.doe@example.com</td>
                                        <td class="px-6 py-4">Generated Report: "Weekly KPIs"</td>
                                        <td class="px-6 py-4"><span
                                                class="bg-yellow-100 text-yellow-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full">Pending</span>
                                        </td>
                                        <td class="px-6 py-4">Sep 20, 2025, 1:45 PM</td>
                                        <td class="px-6 py-4"><a href="#"
                                                class="font-medium text-indigo-600 hover:underline">View Log</a></td>
                                    </tr>
                                    <tr class="bg-white border-b">
                                        <td class="px-6 py-4 font-medium text-gray-900">Admin User</td>
                                        <td class="px-6 py-4">Updated settings: "API Keys"</td>
                                        <td class="px-6 py-4"><span
                                                class="bg-green-100 text-green-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full">Success</span>
                                        </td>
                                        <td class="px-6 py-4">Sep 20, 2025, 11:30 AM</td>
                                        <td class="px-6 py-4"><a href="#"
                                                class="font-medium text-indigo-600 hover:underline">View Log</a></td>
                                    </tr>
                                    <tr class="bg-white border-b">
                                        <td class="px-6 py-4 font-medium text-gray-900">System</td>
                                        <td class="px-6 py-4">Data Source Sync: "Salesforce"</td>
                                        <td class="px-6 py-4"><span
                                                class="bg-red-100 text-red-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full">Failed</span>
                                        </td>
                                        <td class="px-6 py-4">Sep 20, 2025, 9:00 AM</td>
                                        <td class="px-6 py-4"><a href="#"
                                                class="font-medium text-indigo-600 hover:underline">View Log</a></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                </div>
            </main>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Profile menu toggle
            const profileMenuButton = document.getElementById('profile-menu-button');
            const profileMenu = document.getElementById('profile-menu');

            profileMenuButton.addEventListener('click', function (event) {
                profileMenu.classList.toggle('hidden');
                event.stopPropagation();
            });

            document.addEventListener('click', function (event) {
                if (!profileMenu.contains(event.target) && !profileMenuButton.contains(event.target)) {
                    profileMenu.classList.add('hidden');
                }
            });

            // Mobile sidebar toggle
            const menuToggle = document.getElementById('menu-toggle');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebar-overlay');

            const toggleSidebar = () => {
                sidebar.classList.toggle('-translate-x-full');
                sidebarOverlay.classList.toggle('hidden');
            };

            menuToggle.addEventListener('click', toggleSidebar);
            sidebarOverlay.addEventListener('click', toggleSidebar);

            // Set current date
            const dateElement = document.getElementById('current-date');
            if (dateElement) {
                const today = new Date();
                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
                dateElement.textContent = today.toLocaleDateString('en-US', options);
            }
        });
    </script>
    <!-- Mapbox GL JS -->
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
    <!-- In dashboard.ejs, after the Mapbox JS include -->
    <script>
        // 1. SET YOUR ACCESS TOKEN
        mapboxgl.accessToken = 'pk.eyJ1IjoibWFqZXN0aWMxMDAiLCJhIjoiY21mczYyaWV1MGhiZTJpcG9reWZ5NWQ4diJ9.21rREeVNLvNnEqrGoSH-0Q'; // <--- PASTE YOUR TOKEN HERE

        // 2. INITIALIZE THE MAP
        const map = new mapboxgl.Map({
            container: 'map', // The ID of your map container div
            style: 'mapbox://styles/mapbox/streets-v12', // Map style
            center: [78.9629, 20.5937], // Center on the INDIA
            zoom: 3.6 // Starting zoom level
        });

        // 3. ADD DATA TO THE MAP WHEN IT LOADS
        map.on('load', () => {
            // Fetch the location data from our API endpoint
            fetch('/api/reports/locations')
                .then(response => response.json())
                .then(data => {
                    // Add the GeoJSON data as a 'source' to the map
                    map.addSource('report-locations', {
                        type: 'geojson',
                        data: data
                    });

                    // Add a 'layer' to visualize the source data as dots (circles)
                    map.addLayer({
                        id: 'report-points-layer',
                        type: 'circle',
                        source: 'report-locations', // Must match the source ID above
                        paint: {
                            'circle-radius': 6,
                            'circle-color': "#f1c40f", //yellow color
                            'circle-stroke-width': 2,
                            'circle-stroke-color': '#ffffff'
                        }
                    });
                    // 1. ADD THE CLICK EVENT LISTENER
                    // Listen for clicks specifically on the 'report-points-layer'
                    map.on('click', 'report-points-layer', (e) => {
                        // Ensure there is at least one feature at the click point
                        if (e.features.length > 0) {
                            const feature = e.features[0];
                            const reportId = feature.properties.id; // Get the ID from properties
                            const coordinates = feature.geometry.coordinates.slice(); // Get coordinates

                            
                            // Fetch the detailed data for this specific report
                            window.location.href = `/users/reports/${reportId}`;
                        }
                    });
                })
                .catch(err => console.error('Error fetching report locations:', err));
        });

        // 4. (Optional but recommended) ADD POPUPS FOR INTERACTIVITY
        let popup;

        // 1. When the cursor enters a feature on the 'report-points-layer'
        map.on('mouseenter', 'report-points-layer', (e) => {
            // Change the cursor style as a UI indicator.
            map.getCanvas().style.cursor = 'pointer';

            const coordinates = e.features[0].geometry.coordinates.slice();
            const title = e.features[0].properties.title;

            // This logic ensures the popup appears over the correct feature
            // even when the map is zoomed out and wrapped.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            // Create a popup, but don't add it to the map yet.
            popup = new mapboxgl.Popup({
                closeButton: false, // Optional: hide the close button
                offset: 25
            })
                .setLngLat(coordinates)
                .setHTML(`<strong>${title}</strong>`)
                .addTo(map);
        });

        // 2. When the cursor leaves the feature
        map.on('mouseleave', 'report-points-layer', () => {
            // Reset the cursor style
            map.getCanvas().style.cursor = '';

            // If a popup exists, remove it
            if (popup) {
                popup.remove();
            }
        });
    </script>

    <!-- Include a library for relative timestamps. Place this in your main layout if used elsewhere. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/timeago.js/4.0.2/timeago.min.js"></script>
    <script>
        // Initialize the timeago library to convert timestamps
        if (typeof timeago !== 'undefined') {
            timeago.render(document.querySelectorAll('.timeago'));
        }

        // JavaScript to toggle the action menus
        document.addEventListener('click', function (event) {
            // Close all open dropdowns
            document.querySelectorAll('.action-menu-dropdown').forEach(function (dropdown) {
                if (!dropdown.parentElement.contains(event.target)) {
                    dropdown.classList.add('hidden');
                }
            });

            // If a button was clicked, toggle its specific dropdown
            const button = event.target.closest('.action-menu-button');
            if (button) {
                const dropdown = button.nextElementSibling;
                if (dropdown) {
                    dropdown.classList.toggle('hidden');
                }
            }
        });
    </script>

    <script>
        
        document.addEventListener('DOMContentLoaded', () => {

                const reportListContainer = document.getElementById('report-list-container');
                // If the list container doesn't exist on this page, stop the script.
                if (!reportListContainer) {
                    return;
                }

                // --- State Management ---
                // Keep track of the IDs of reports already displayed on the page.
                let knownReportIds = new Set();

                // --- Helper Function ---
                // This function builds the HTML for a new list item.
                function createReportFeedItem(report) {
                    const listItem = document.createElement('li');
                    listItem.id = `report-item-${report.id}`; // Assign the ID
                    listItem.className = 'p-6 hover:bg-gray-50 transition-colors new-report-animation';
                    const tagsHtml = report.tags.map(tag => `<span class="inline-flex items-center rounded-full px-3 py-1 text-xs font-medium ${tag.classes}">${tag.text}</span>`).join('');
                    const timestamp = new Date().toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });

                    listItem.innerHTML = `
            <div class="flex items-start space-x-4">
                <div class="flex-shrink-0"><span class="h-10 w-10 rounded-full flex items-center justify-center font-semibold ${report.avatarClasses}">${report.initials}</span></div>
                <div class="flex-grow">
                    <div class="flex justify-between items-start">
                        <div>
                            <p class="font-semibold text-gray-800">${report.name}</p>
                            <div class="flex items-center text-sm text-gray-600 mt-1">
                                <svg class="w-4 h-4 mr-1.5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" /></svg>
                                ${report.location}
                            </div>
                        </div>
                        <p class="text-xs text-gray-500 flex-shrink-0">${timestamp}</p>
                    </div>
                    <div class="mt-3 flex flex-wrap gap-2">${tagsHtml}</div>
                    <div class="mt-4 flex justify-end">
                        <a href="/users/reports/${report.id}" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white border border-transparent rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 ${report.buttonClasses}">
                            View Report
                            <svg class="ml-2 -mr-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 10a.75.75 0 01.75-.75h10.638L10.23 5.29a.75.75 0 111.04-1.08l5.5 5.25a.75.75 0 010 1.08l-5.5 5.25a.75.75 0 11-1.04-1.08l4.158-3.96H3.75A.75.75 0 013 10z" clip-rule="evenodd" /></svg>
                        </a>
                    </div>
                </div>
            </div>`;
                    return listItem;
                }

                // --- Polling Function ---
                // This function fetches all reports and adds any new ones to the top of the list.
                async function fetchAndRenderReports() {
                    try {
                        const response = await fetch('/api/reports');
                        if (!response.ok) return; // Don't do anything if the fetch fails

                        const allReports = await response.json();

                        // Find reports that are NOT yet in our known IDs set
                        const newReports = allReports.filter(report => !knownReportIds.has(report.id));

                        if (newReports.length > 0) {
                            console.log(`Found ${newReports.length} new reports to display.`);
                            // Add new reports to the top of the list
                            newReports.reverse().forEach(report => {
                                const reportElement = createReportFeedItem(report);
                                reportListContainer.prepend(reportElement);
                                // Add the new report's ID to our set so we don't add it again
                                knownReportIds.add(report.id);
                            });
                        }
                    } catch (error) {
                        console.error("Polling failed:", error);
                    }
                }

                // --- Initialization ---
                // 1. First, populate the 'knownReportIds' with the reports already rendered by EJS.
                document.querySelectorAll('[id^="report-item-"]').forEach(item => {
                    const id = item.id.replace('report-item-', '');
                    knownReportIds.add(id);
                });
                console.log(`Initialized with ${knownReportIds.size} reports.`);

                // 2. Start the polling loop to check for new reports every 10 seconds.
                setInterval(fetchAndRenderReports, 5000);
            });
    </script>

</body>

</html>